using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading;
using System.Threading.Tasks;

using ErrorOr;
using MediatR;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;

using {{solutionName}}.Api.Endpoints.Common.Contracts;
using {{solutionName}}.Api.Endpoints.Common.Extensions;
using {{solutionName}}.Application.{{name|plural}}.Queries.GetById;
using {{solutionName}}.Contracts.{{name|plural}}.Responses;

namespace {{solutionName}}.Api.Endpoints.{{name|plural}};

/// <summary>
/// Endpoint handler for getting a {{name}} by id.
/// </summary>
public class Get{{name}}ById : IEndpoint
{
    /// <inheritdoc />
    public static RouteHandlerBuilder Map(IEndpointRouteBuilder app) => app
        .MapGet("{id:guid}", HandleAsync)
        .Produces<Get{{name}}ByIdResponse>(StatusCodes.Status200OK, "application/json")
        .ProducesProblem(StatusCodes.Status404NotFound, "application/json")
        .WithName("Get{{name}}ById");
            
    /// <summary>
    /// API request for getting a {{name}} by id.
    /// </summary>
    /// <param name="id">Unique id for {{name}}.</param>
    /// <param name="user"><see cref="ClaimsPrincipal"/>. Logged in user.</param>
    /// <param name="mediator"><see cref="ISender"/>.</param>
    /// <param name="cancellationToken"><see cref="CancellationToken"/>.</param>
    /// <returns><see cref="IResult"/>.</returns>
    public async static Task<IResult> HandleAsync(
        [FromRoute] Guid id,
        ClaimsPrincipal user,
        [FromServices] ISender mediator,
        CancellationToken cancellationToken)
    {
        if (!Guid.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out var userId) && userId != Guid.Empty)
        {
            return Results.Unauthorized();
        }
        
        if (id == Guid.Empty)
        {
            var error = Error.Validation(code: "Get{{name}}ById.IdRequired", description: "Id is required.");
            return new List<Error> { error }.ToProblemDetailsResult();
        }

        var query = new Get{{name}}ByIdQuery(id, userId);
        var result = await mediator.Send(query, cancellationToken);
        
        return result.Match(
            {{name|lower}} => Results.Ok({{name|lower}}.ToResponse()),
            _ => Results.NotFound(new { id = id }));
    }
}