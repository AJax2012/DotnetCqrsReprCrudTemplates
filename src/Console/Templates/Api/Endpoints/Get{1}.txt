using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading;
using System.Threading.Tasks;

using ErrorOr;
using MediatR;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;

using {{solutionName}}.Api.Endpoints.Common;
using {{solutionName}}.Application.{{name|plural}}.Queries.GetPaginated;
using {{solutionName}}.Contracts.{{name|plural}}.Responses;

namespace {{solutionName}}.Api.Endpoints.{{name|plural}};

/// <summary>
/// Endpoint handler for getting a paginated list of {{name}}.
/// </summary>
public static class Get{{name|plural}}
{
    /// <summary>
    /// API request for getting a paginated list of {{name}}.
    /// </summary>
    /// <param name="limit">Number of results to retrieve.</param>
    /// <param name="orderBy">List of properties to order results by.</param>
    /// <param name="isDescending">Sets orderBy to descending or ascending (descending by default).</param>    
    /// <param name="nextPageToken">Tokenized string to get the next page.</param>
    /// <param name="user"><see cref="ClaimsPrincipal"/>. Logged in user.</param>
    /// <param name="mediator"><see cref="ISender"/>.</param>
    /// <param name="cancellationToken"><see cref="CancellationToken"/>.</param>
    /// <returns><see cref="IResult"/>.</returns>
    public async static Task<IResult> HandleAsync(
        [FromQuery] int? limit,
        [AsParameters] List<string>? orderBy,
        [FromQuery(Name = "desc")] bool? isDescending,
        [FromQuery(Name = "next_page")] string nextPageToken,
        ClaimsPrincipal user,
        [FromServices] ISender mediator,
        CancellationToken cancellationToken)
    {
        if (!Guid.TryParse(user.FindFirstValue(ClaimTypes.NameIdentifier), out var userId) && userId != Guid.Empty)
        {
            return Results.Unauthorized();
        }

        var query = new Get{{name|plural}}PaginatedQuery(
            userId,
            limit ?? 10,
            orderBy ?? new List<string>(),
            isDescending ?? true,
            nextPageToken);
        
        var result = await mediator.Send(query, cancellationToken);
        
        return result.Match(
            {{name|lower}} => Results.Ok({{name|lower}}.ToResponse()),
            errors => errors.ToProblemDetailsResult());
    }
}